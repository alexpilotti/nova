#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2010 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""Starter script for Nova Compute."""

import eventlet
if os.name == 'nt':
    eventlet.monkey_patch(os=None)
    import win32service
    import win32serviceutil
else:
    eventlet.monkey_path()

import os
import sys

# If ../nova/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
POSSIBLE_TOPDIR = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(POSSIBLE_TOPDIR, 'nova', '__init__.py')):
    sys.path.insert(0, POSSIBLE_TOPDIR)


from nova import flags
from nova import log as logging
from nova import service
from nova import utils

class compute_win32_service(win32serviceutil.ServiceFramework):
    _svc_name_ = "openstack-compute"
    _svc_display_name_ = "OpenStack Compute Service"
    _svc_description_ = "OpenStack Compute Service Node"

    def __init__(self,args):
        win32serviceutil.ServiceFramework.__init__(self,args)
        # moved the addition of the default flags location and init
        # of the flags to inside the class so the service wrapper
        # doesnt conflict with the command line variables
        utils.default_flagfile()
        flags.FLAGS(sys.argv)
        logging.setup()
        self.isAlive = True
    
    def SvcDoRun(self):
        import servicemanager

        servicemanager.LogInfoMsg("OpenStack Compute: Starting")

        server = service.Service.create(binary='nova-compute')
    	service.serve(server)

        while self.isAlive :
            # instead of calling service.wait here we just sleep 
            # giving us an active loop to exit out of on a stop command
            time.sleep(5)
    
        servicemanager.LogInfoMsg("OpenStack Compute: Stopped")
    
    def SvcStop(self):
        import servicemanager
    
        servicemanager.LogInfoMsg("OpenStack Compute: Recieved stop signal")
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        self.isAlive = False


if __name__ == '__main__':
    #Comment out to run as non-service/debug
    if os.name == "nt":
        win32serviceutil.HandleCommandLine(compute_win32_service)
    else:
        utils.default_flagfile()
        flags.FLAGS(sys.argv)
        logging.setup()
        utils.monkey_patch()
        server = service.Service.create(binary='nova-compute')
        service.serve(server)
        service.wait()
